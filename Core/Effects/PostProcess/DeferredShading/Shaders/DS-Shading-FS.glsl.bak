/*
*	Authors: G. THOIN
*	Master 2 ISICG
*/

#version 440 core
#extension GL_ARB_shading_language_include : enable
#include "/Materials/Common/Lighting/Lighting"

uniform sampler2DArray GBuffers;

in vec2 texCoord;
layout(std140) uniform CPU
{	
	vec3 CamPos;
};

layout (location = 0) out vec3 Color;

void main()
{
	//----- Ambient Occlusion -----//
	float AO = texture(GBuffers, vec3(texCoord.xy, 0.0)).r;
	//----- Albedo : Diffuse -----//
	vec3 Diffuse = texture(GBuffers, vec3(texCoord.xy, 1.0)).rgb;
	//----- Specular -----//
	vec3 Specular = texture(GBuffers, vec3(texCoord.xy, 2.0)).rgb;
	//----- Position -----//
	vec3 Position = texture(GBuffers, vec3(texCoord.xy, 3.0)).xyz;
	//----- Normal -----//
	vec3 N = texture(GBuffers, vec3(texCoord.xy, 4.0)).xyz;
	
	vec3 T, B;
	T = vec3(1.0, 0.0, 0.0);
	T = normalize(T - dot(T, N) * N);
	B = cross(N, T);

//	Color = Shading(T, B, N, normalize(CamPos-Position), Position, AO, Diffuse, Specular, vec4(1.0, 0.8, 1.2, 160.0), 2);

	vec3 baseColor = Diffuse;
	float reflectance = 0.5;
	float metalMask = 0.0;
	vec3 F0 = 0.16f*(reflectance*reflectance)*(1.0f - metalMask) + baseColor*metalMask;

	Color = addPBR( Position, N, normalize (CamPos.xyz-Position), baseColor, 0.36, F0).rgb;

	//Color = texture(GBuffers, vec3(texCoord.xy, 3.0))

}