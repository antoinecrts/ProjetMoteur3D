#version 440 core


uniform sampler2D ColorSampler;
uniform sampler2DArray GBuffers;

  in vec2 texCoord;

  layout (location = 0) out vec3 Color;

  layout(std140) uniform CPU {
  	float velocityScale;
  };


  void main()
  {

    vec2 texelSize = 1.0 / vec2(textureSize(ColorSampler, 0));
  
    vec2 velocity = textureLod(GBuffers, vec3(texCoord, 6.0), 0).rg;
    velocity *= velocityScale;

    float speed = length(velocity / texelSize);
    int nbSamples = clamp(int(speed), 1, 16);

    Color = textureLod(ColorSampler, texCoord, 0).rgb;

    for (int i = 1; i < nbSamples; i++) {
      vec2 offset = velocity * (float(i) / float(nbSamples - 1) - 0.5);
      vec2 uv2 = texCoord + offset;
      if(uv2.x>0.0 && uv2.x<1.0 && uv2.y>0.0 && uv2.y<1.0) {
        Color += textureLod(ColorSampler, uv2, 0).rgb;
      } 
    }
    Color /= float(nbSamples);


  }

